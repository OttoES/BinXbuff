@name       =  "GGCommsDefinition"
@version    =  "1.0.dev1"
@copyright  =  "Copyright OttoES (2018)"
@doc_title  =  "Greatguide Communications Protocol Definition"
@doc_header =  "BXB est definition document"
@doc_intro  =  '''This is the definiton of the message protocol
                  used between the seat units and the master streamer.
                  Messages and tags marked with "DevOnly" should be 
                  ignored and is purly for trouble shooting. '''

@c_includes =  '''
#include <stdio.h>
'''

@c_code = '''

const int MLEN = 5;

void testfun(void)
{
   ;
} // end test

static uint16_t crc16(uint8_t buf[],int startpos,int endpos) { return 0xEEE; }
'''

# This is a C annotation to call a function (DATA_store in this case) at the end of the pack function.
# By default the pack function will simply pack all bytes in a buffer send as argument with the pact function.
# An alternavive is that the pack function allocate the buffer and call a function with the byte buffer.  
@cpp_call_in_pack = "DATA_store"

/* A list of all the commands. Note that all commands are send to a spesific 
   address except the broadcast command. Most commands have an acknowladge
   but note:
   * each command have a paired acknowldge (ACK) command id
   * there is only one not acknowladge (NAC) command shared by all commands 
   * the debug command is not acknowladged
   * a broadcast command is only acknowladced by one address
*/
enum comnd { 
    CMD_NONE           = 0x0;   // Not a valid command 
    CMD_BROADCAST      = 0x0A;  // Broadcast 
    CMD_BROADCAST_ACK  = 0x03;  // An acknowladge if the broadcast command was sucessfull 
    CMD_READ           = 0x15;
    CMD_READ_REPLY     = 0x16;
    CMD_WRITE          = 0x29;
    CMD_WRITE_ACK      = 0x30;  // Acknowladge send on a write
    CMD_WR_SLAVE       = 0x3D;  // Not used: Reserved to be used to write to a single seat unit.
    CMD_DEBUG          = 0x1A;  // DevOnly: Debug command only and should be ignored otherwise.
    CMD_NACK           = 0x04;  // A negative ackowladge used if any command failed  
    CMD_ACK_HEADER     = 0x05;  // An acknowladge used if the header was recieved withhout error.  
    }


/* 
 This is the common header for all messages. 
*/
struct MsgHeader
@MSG_BASE=""
<MSG_ID=CMD_NONE>
<MLEN=5>
{
    /* This is a magic number that indicates the start of the message. */
    uint32  __magic = 0xEFBE0D90 @CHECK;   // (This is 0x900DBEEF in bigendian format)
    /*
       The destination address is where the message should be send to.
       Devices are allocated a fixed address. The address for the master streamer 
       is always 0. Seat units are each configured with ther own addresses.
       Messages can be either directed to a single device or broadcasted 
       depending on the command. If it is a broadcast command the destination
       will still be for a spesific address and that address should send CMD_BROADCAST_ACK
       acknowladges or a CMD_ACK_HEADER on sucess or a CMD_NACK on an error. 
       When broadcasted the broadcast address is 0xFF
    */
    uint8          destAddr;   
    uint8          sourceAddr;            // The source address.
    enum8 comnd    msg_id    = MSG_ID;       // This is the UNKNOWN message identifier. 
    uint8          subCmd;                //  
    uint16         mlen    = MLEN;      // the lenghth of he data 
    uint16         seqNr;                 // A sequence number send with the request
    uint16         xxxxx;
    uint16         __crc2 = @crc16(&destAddr,xxxxx& ) @CHECK;
}  

/*
  The read command reads information from the seat units, normally statistics 
  and state changes. The seat unit should respond with a CMD_READ_ACK or 
  CMD_NAC on failure.
*/
struct ReadMsg headedby MsgHeader
@c_pack=1
@c_unpack=1
<MSG_ID = CMD_READ> 
<MSG_LEN=0>
<IS_MSG = 0x55>
{
    RETAG msg_id = 99;
    RETAG subCmd = 59;
    enum8 subRead  subCmd2 { a=1 ; b=2;};         // 
    uint16         rlen    = 0;     // no data send with this message
    /*
      A sequence number assosiated with this message and returned 
      by the CMD_READ_ACK
    */
    uint16         seqNr2;       
}


struct infoLog
@STRUCT=1
{
    enum8  SubCmdRead etype;
    uint8        seatNr;
    uint8        seatLeftAux1;
    uint8        seatRightAux1;
    uint32       res;
}



struct ReadMsgReply headedby MsgHeader
<CASE=44>
<MSG_ID   = CMD_READ_REPLY> 
<MSG_COND = (subCmd == DINFO_EVENT_LOG)  >
{
      
    infoLog[10]    log;                // normally

}

enum  SubCmdRead {
    DINFO_STATUS             = 1;  // DevOnly
    DINFO_VERSION            = 2;  // DevOnly
    DINFO_NETSTATS           = 4;
    DINFO_STATS_REP          = 5;
    DINFO_LANG_STATS         = 6;
    DINFO_HOPONOFF_STATS     = 7;
    DINFO_EVENT_LOG          = 8;
    DINFO_EVENT_LOG_WITH_DEL = 9;
    DINFO_DEBUG              = 100; // DevOnly

}

enum Gender {
    UNKNOWN = 0;    
    MALE    = 1;   // set as male
    FEMLE   = 0x2;   // set as female
    OTHER   = 0x3;   // if a person identifies with a different gender 
}

/*
  This is the message to set the user profile.
  Line 2 of comment
*/
struct SetProfile headedby MsgHeader 
@c_pack=FALSE
@CV=542
<MSG_ID = 0x1155>  <ARRLEN = 10>
{ 
  int32 id = 1;      // the user identificatin number
  char[20]  surname; // the user surname
  enum8     ename  fieldvarname {  x1=1; x2=2; a1 = 3;  };      

  enum8     Gender gender;
  int8      dlen  @BE;
  char[dlen]    addit;
}



struct DemoIntlFuncCall 
@cv_call_in_pack = "DATA_transmit"
@c_call_after_unpack = "processDemoCall"
{
   uint16    vxx1;
   uint32    vxx2;
   infoLog   infox;
   uint8     infoLen;
   infoLog[infoLen]   infoarr;
}